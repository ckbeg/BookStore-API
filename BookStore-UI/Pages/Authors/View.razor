@page "/authors/view/{Id}"
@using BookStore_UI.Static

@inject IAuthorRepository _repo;
@inject NavigationManager _navManager;

<h3>View</h3>

@if (Model == null) {
    <LoadingMessage Message="Loading Author For View"></LoadingMessage>

} else {
<div class="col-md-4">
    <h4>Author Details</h4>
    <table class="table table-responsive">
        <tr>
            <td>First Name</td>
            <td>@Model.Firstname</td>
        </tr>
        <tr>
            <td>Last Name</td>
            <td>@Model.Lastname</td>
        </tr>
        <tr>
            <td>Biography</td>
            <td>@Model.Bio</td>
        </tr>
    </table>
    <br/>
    @if (Model.Books != null && Model.Books.Count > 0) {
        <div class="card" style="width: 18rem;">
            <div class="card-header">
                <h4>Author's Books</h4>
            </div>
            <ul class="list-group list-group-flush">
                @foreach (var book in Model.Books) {
                    <li class="list-group-item">@book.Title - @book.Price </li>
                }
            </ul>
        </div>
    } else {
        <div class="alert alert-dismissible alert-secondary">
            No books for this author
        </div>
    }
    
</div>
}
<br/>
<button @onclick="BackToList"><span class="oi oi-media-skip-backward"></span>Back To List</button>

@code {

    [Parameter]
    public string Id { get; set; }

    private Author Model = new Author();

    protected override async Task OnInitializedAsync() {
        Model = await _repo.Get(Endpoints.AuthorsEndpoint, Int32.Parse(Id));
    }

    private void BackToList() {
        _navManager.NavigateTo("/authors/");
    }

}
